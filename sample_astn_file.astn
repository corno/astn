! "a header" //the header is optional if set it is a ! followed by any type of value

( //a verbose group

    //a line comment

    /* a block comment
    spanning multiple lines
    */

    'collections': (

        /* verbose group:
        a verbose group represents an instance of a type with properties. the possible keys (property names)
        in a verbose group are predetermined by a schema.
        The convention is that keys in verbose groups should have apostrophes.
        */
        'a verbose group': (
            'my number': 42
            'my string': "foo", //commas are optional and trailing commas are allowed
        )

        /* concise group
        a concise group contains the same information as a verbose group; types with properties. However, in this case
        the properties are omitted. The order in which the properties should be specified is up to the implementation.
        Notice how the example below contains the same information as the one above
        */
        'a concise group': <42, "foo">

        /* dictionary:
        a dictionary represents a collection of instances (records/entries). Keys can have any value and
        represent the identifier of the entry. The convention is that identifiers should have backticks
        */
        'a dictionary': {
            `my first entry`: 42
            `my second entry`: 1
        }

        /* list
        a list is a dynamic ordered collection of elements (records without an identifier), it can take as many elements as desired
        */
        'a list': [42 1 2 3]

    )

    'strings': (
        //there are 4 flavors of strings; backticked, apostrophed, quoted and undelimited

        'a backticked string': `abc` //used for identifiers (the keys of dictionary entries and values that reference a dictionary entry)
        //when you see a backticked string you can assume that it is the name of an entry/record/instance
        
        'a quoted string': "ABC"
        // 'a quoted string with escaped characters': "abc\"def"
        // 'a quoted string with newline': "abc\ndef"
        'a quoted string with apostrophe': "abc'def"
        'a quoted string with backtick': "abc`def"
        'a quoted string spanning multiple lines': "abc
        def
        ghi"

        'an apostrophed sting': 'my apostrophed string' //apostrophed strings can be used as keys as well as values, but the convention
        //expects them only as keys (and state names, see below). (So this example is not canonical)

        /* undelimited strings
        these are strings, with no delimiters, can be used to denote numbers, dates, booleans.
        JSON's numbers, null, true, and false are undelimited strings in ASTN. It is up to the implementation to interpret the string into the appropriate value.
        */
        'an undelimited string': abc
        'my date': 2023-10-01 //dates can be written as undelimited strings
        'my number': 42 //numbers can be written as undelimited strings
        'my boolean': true //booleans can be written as undelimited strings
    )

    /*
    a tagged value is a value that has a state name and a value. The state name is the first value, the second value is the data associated with that state.
    the idea is that the person editing the file selects a state from a couple of possibilities, and based on that choice provides the data that is associated with that state.
    */
    'a tagged value': | 'my state' foo // the first value ('my state') tells the selected state.
    //The second value is the data assoicated with that specific state

    /*
    astn files can include other astn files. This is done by using the `@` symbol followed by the path to the file.
    The content of the included file is inserted at the point where the `@` symbol is found.
    Circular references are not allowed, so the included file cannot include the file that includes it.
    A file can be included multiple times, which means that the content of the included file is inserted multiple times.
    */
    'an include': @ `data/sample_astn_file.astn`
    
    /*   a not set value
    if no value is present, the ~ (tilde) symbol is used to denote that the value is not set.
    The equivalent in JSON value is keyword 'null'.
    */
    'a not set value': ~

    /*set value
    sometimes it is needed to explictly state that a value is set, in that case you can use the *
    */
    'a set value': * "abc"
)